name_theme = "Встроенные функции (в разработке)"
questions_dict = {
    0: {
        "question": "Что делает функция `len()`?",
        "answer_1": "Возвращает длину строки.",
        "answer_2": "Возвращает количество элементов в коллекции.",
        "answer_3": "Возвращает максимальное значение в списке.",
        "answer_4": "Возвращает минимальное значение в списке.",
        "answer_5": "Возвращает сумму всех элементов в списке.",
        "valid": "answer_2",
        "explanation": (
            "Функция `len()` возвращает количество элементов в коллекции, такой как список, строка, кортеж или словарь. "
            "Например, `len([1, 2, 3])` вернет 3, так как в списке три элемента. "
            "Ответ 1 неверен, потому что `len()` работает не только со строками, но и с другими коллекциями. "
            "Ответы 3, 4 и 5 неверны, так как `len()` не возвращает максимальное, минимальное значение или сумму элементов."
        )
    },
    1: {
        "question": "Какой результат выполнения кода `print(type(42))`?",
        "answer_1": "<class 'int'>",
        "answer_2": "<class 'float'>",
        "answer_3": "<class 'str'>",
        "answer_4": "<class 'list'>",
        "answer_5": "Ошибка",
        "valid": "answer_1",
        "explanation": (
            "Функция `type()` возвращает тип объекта. В данном случае 42 — это целое число (int), поэтому результат будет `<class 'int'>`. "
            "Ответ 2 неверен, так как 42 не является числом с плавающей запятой. "
            "Ответ 3 неверен, так как 42 не является строкой. "
            "Ответ 4 неверен, так как 42 не является списком. "
            "Ответ 5 неверен, так как код выполнится без ошибок."
        )
    },
    2: {
        "question": "Какой встроенной функцией можно преобразовать строку в целое число?",
        "answer_1": "int()",
        "answer_2": "float()",
        "answer_3": "str()",
        "answer_4": "list()",
        "answer_5": "dict()",
        "valid": "answer_1",
        "explanation": (
            "Функция `int()` используется для преобразования строки, содержащей число, в целое число. Например, `int('42')` вернет 42. "
            "Ответ 2 неверен, так как `float()` преобразует строку в число с плавающей запятой. "
            "Ответ 3 неверен, так как `str()` преобразует объект в строку, а не в число. "
            "Ответы 4 и 5 неверны, так как `list()` и `dict()` создают списки и словари соответственно, а не преобразуют строку в число."
        )
    },
    3: {
        "question": "Какой результат выполнения кода `print(sum([1, 2, 3, 4]))`?",
        "answer_1": "10",
        "answer_2": "9",
        "answer_3": "8",
        "answer_4": "7",
        "answer_5": "Ошибка",
        "valid": "answer_1",
        "explanation": (
            "Функция `sum()` возвращает сумму всех элементов в списке. В данном случае `sum([1, 2, 3, 4])` вернет 10, так как 1 + 2 + 3 + 4 = 10. "
            "Ответы 2, 3 и 4 неверны, так как они не соответствуют правильной сумме. "
            "Ответ 5 неверен, так как код выполнится без ошибок."
        )
    },
    4: {
        "question": "Для чего используется функция `max()`?",
        "answer_1": "Для нахождения минимального значения в списке.",
        "answer_2": "Для нахождения максимального значения в списке.",
        "answer_3": "Для нахождения среднего значения.",
        "answer_4": "Для нахождения длины списка.",
        "answer_5": "Для сортировки списка.",
        "valid": "answer_2",
        "explanation": (
            "Функция `max()` возвращает максимальное значение из переданных аргументов или коллекции. Например, `max([1, 2, 3])` вернет 3. "
            "Ответ 1 неверен, так как для нахождения минимального значения используется функция `min()`. "
            "Ответ 3 неверен, так как `max()` не вычисляет среднее значение. "
            "Ответ 4 неверен, так как для нахождения длины списка используется функция `len()`. "
            "Ответ 5 неверен, так как для сортировки списка используется функция `sorted()`."
        )
    },
    5: {
        "question": "Какой результат выполнения кода `print(min([5, 3, 9, 1]))`?",
        "answer_1": "1",
        "answer_2": "3",
        "answer_3": "5",
        "answer_4": "9",
        "answer_5": "Ошибка",
        "valid": "answer_1",
        "explanation": (
            "Функция `min()` возвращает наименьший элемент из итерируемого объекта. "
            "В списке `[5, 3, 9, 1]` минимальное значение — 1. "
            "Ответ 2 неверен, так как 3 не является минимальным. "
            "Ответы 3 и 4 — это элементы списка, но не минимальные. "
            "Ответ 5 неверен, так как код синтаксически корректнен."
        )
    },
    6: {
        "question": "Что делает функция `sorted()`?",
        "answer_1": "Сортирует элементы в порядке возрастания.",
        "answer_2": "Сортирует элементы в порядке убывания.",
        "answer_3": "Создает новый отсортированный список.",
        "answer_4": "Все вышеперечисленные.",
        "answer_5": "Ничего.",
        "valid": "answer_4",
        "explanation": (
            "Функция `sorted()`: \n"
            "1. По умолчанию сортирует в порядке возрастания (Ответ 1 верен частично).\n"
            "2. Может сортировать в убывающем порядке с параметром `reverse=True` (Ответ 2 верен частично).\n"
            "3. Всегда возвращает **новый список**, не изменяя исходный (Ответ 3 верен частично).\n"
            "Ответ 4 верен, так как объединяет все возможности. "
            "Ответ 5 неверен, так как функция выполняет сортировку."
        )
    },
    7: {
        "question": "Какой результат выполнения кода `print(round(3.14159, 2))`?",
        "answer_1": "3.14",
        "answer_2": "3.15",
        "answer_3": "3",
        "answer_4": "3.1",
        "answer_5": "Ошибка",
        "valid": "answer_1",
        "explanation": (
            "Функция `round()` округляет число до указанного количества знаков после запятой. "
            "`round(3.14159, 2)` округлит до двух знаков: 3.14. "
            "Ответ 2 неверен — это было бы при округлении 3.145. "
            "Ответ 3 и 4 отбрасывают дробную часть, что некорректно. "
            "Ответ 5 неверен, так как синтаксис правильный."
        )
    },
    8: {
        "question": "Какой будет результат выполнения кода `print(list('Hello'))`?",
        "answer_1": "['H', 'e', 'l', 'l', 'o']",
        "answer_2": "['Hello']",
        "answer_3": "Ошибка",
        "answer_4": "Hello",
        "answer_5": "None",
        "valid": "answer_1",
        "explanation": (
            "Функция `list()` преобразует строку в список символов. "
            "Строка 'Hello' состоит из 5 символов, поэтому результат — список из 5 элементов. "
            "Ответ 2 неверен, так как строка не становится единственным элементом. "
            "Ответ 3 ошибочен — преобразование допустимо. "
            "Ответы 4 и 5 не соответствуют типу результата (списку)."
        )
    },
    9: {
        "question": "Какой результат выполнения кода print(' '.join(['Hello', 'world!']))?",
        "answer_1": "Hello world!",
        "answer_2": "Hello, world!",
        "answer_3": "Hello world",
        "answer_4": "Ошибка",
        "answer_5": "None",
        "valid": "answer_1",
        "explanation": (
            "Метод `join()` объединяет элементы списка в строку, используя разделитель (в данном случае пробел).\n"
            "Список `['Hello', 'world!']` будет объединен как 'Hello world!'. "
            "Ответ 2 неверен — запятая добавлена не будет. "
            "Ответ 3 ошибочен — восклицательный знак сохраняется. "
            "Ответ 4 неверен — синтаксис корректен. "
            "Ответ 5 неверен — функция возвращает строку."
        )
    },
    # Продолжение для остальных вопросов...
    10: {
        "question": "Какой будет результат выполнения кода print(bool(0))?",
        "answer_1": "True",
        "answer_2": "False",
        "answer_3": "None",
        "answer_4": "0",
        "answer_5": "1",
        "valid": "answer_2",
        "explanation": (
            "В Python `0`, пустые коллекции и `None` считаются ложными (False). "
            "Ответ 1 неверен — 0 преобразуется в False. "
            "Ответы 3-5 не соответствуют типу `bool` (результат — False, а не None/0/1)."
        )
    },
    11: {
        "question": "Что делает функция all()?",
        "answer_1": "Проверяет, все ли элементы истинны.",
        "answer_2": "Проверяет, есть ли хотя бы один истинный элемент.",
        "answer_3": "Возвращает сумму всех элементов.",
        "answer_4": "Возвращает количество элементов.",
        "answer_5": "Проверяет, все ли элементы ложны.",
        "valid": "answer_1",
        "explanation": (
            "Функция `all()` возвращает True только если ВСЕ элементы итерируемого объекта истинны. "
            "Пример: `all([1, True, 'text'])` → True, но `all([1, 0, ''])` → False. потому что и 0 и '' считаются ложными.\n"
            "Ответ 2 описывает функцию `any()`. "
            "Ответы 3-4 не соответствуют назначению функции. "
            "Ответ 5 неверен — это противоположность `all()`."
        )
    },
    12: {
        "question": "Что делает функция any()?",
        "answer_1": "Проверяет, есть ли хотя бы один истинный элемент.",
        "answer_2": "Проверяет, все ли элементы истинны.",
        "answer_3": "Возвращает сумму всех элементов.",
        "answer_4": "Возвращает количество элементов.",
        "answer_5": "Проверяет, все ли элементы ложны.",
        "valid": "answer_1",
        "explanation": (
            "Функция `any()` возвращает True, если ХОТЯ БЫ ОДИН элемент истинный. "
            "Пример: `any([0, False, 'text'])` → True.\n"
            "Ответ 2 описывает `all()`. "
            "Ответы 3-4 не связаны с функцией. "
            "Ответ 5 неверен — это проверка `all(not x for x in iterable)`."
        )
    },
    13: {
        "question": "Какой результат выполнения кода print(float('3.14'))?",
        "answer_1": "3.14",
        "answer_2": "3",
        "answer_3": "Ошибка",
        "answer_4": "None",
        "answer_5": "0",
        "valid": "answer_1",
        "explanation": (
            "Функция `float()` преобразует строку в число с плавающей запятой. "
            "Строка '3.14' корректно преобразуется в `3.14`. "
            "Ответ 2 неверен — `int('3.14')` вызвал бы ошибку. "
            "Ответ 3 ошибочен — синтаксис корректен. "
            "Ответы 4 и 5 не соответствуют результату."
        )
    },

    14: {
        "question": "Какой будет результат выполнения кода print(int(3.9))?",
        "answer_1": "3",
        "answer_2": "4",
        "answer_3": "3.9",
        "answer_4": "Ошибка",
        "answer_5": "None",
        "valid": "answer_1",
        "explanation": (
            "Функция `int()` отбрасывает дробную часть числа. "
            "`int(3.9)` вернет 3, а не округлит до 4. "
            "Ответ 2 неверен — округление выполняется функцией `round()`. "
            "Ответ 3 ошибочен — `int()` не сохраняет дробную часть. "
            "Ответ 4 неверен — код синтаксически корректен."
        )
    },

    15: {
        "question": "Какой будет результат выполнения кода print(str(100))?",
        "answer_1": "100",
        "answer_2": "Ошибка",
        "answer_3": "None",
        "answer_4": "100.0",
        "answer_5": "0",
        "valid": "answer_1",
        "explanation": (
            "Функция `str()` преобразует объект в строку. "
            "Число 100 будет преобразовано в строку '100'. "
            "Ответ 2 неверен — преобразование допустимо. "
            "Ответ 4 ошибочен — `str(100)` не добавляет .0. "
            "Ответ 5 неверен — результат строка, а не число."
        )
    },

    16: {
        "question": "Какой результат выполнения кода print(list(map(str, [1, 2, 3])))?",
        "answer_1": "['1', '2', '3']",
        "answer_2": "1, 2, 3",
        "answer_3": "[0, 1, 2]",
        "answer_4": "Ошибка",
        "answer_5": "None",
        "valid": "answer_1",
        "explanation": (
            "Функция `map()` применяет `str()` к каждому элементу списка. "
            "Результат — список строк: ['1', '2', '3']. "
            "Ответ 2 неверен — вывод не является строкой с разделителями. "
            "Ответ 3 ошибочен — элементы не изменяются на 0, 1, 2. "
            "Ответ 4 неверен — синтаксис корректен."
        )
    },

    17: {
        "question": "Какой будет результат выполнения кода print(sorted([3, 1, 2]))?",
        "answer_1": "[1, 2, 3]",
        "answer_2": "3, 1, 2",
        "answer_3": "[2, 3, 1]",
        "answer_4": "Ошибка",
        "answer_5": "None",
        "valid": "answer_1",
        "explanation": (
            "Функция `sorted()` возвращает новый список, отсортированный по возрастанию. "
            "Исходный список [3, 1, 2] будет преобразован в [1, 2, 3]. "
            "Ответ 2 неверен — вывод должен быть списком, а не строкой. "
            "Ответ 3 ошибочен — порядок элементов неверный. "
            "Ответ 4 неверен — код корректен."
        )
    },

    18: {
        "question": "Какой будет результат выполнения кода print(len('Hello'))?",
        "answer_1": "5",
        "answer_2": "4",
        "answer_3": "3",
        "answer_4": "Ошибка",
        "answer_5": "None",
        "valid": "answer_1",
        "explanation": (
            "Функция `len()` возвращает количество символов в строке. "
            "Строка 'Hello' содержит 5 символов. "
            "Ответ 2 неверен — это длина слова 'Hell' (без последней 'o'). "
            "Ответ 3 ошибочен — это длина слова 'Hel'. "
            "Ответ 4 неверен — код синтаксически правильный."
        )
    },

    19: {
        "question": "Какой результат выполнения кода print('abc'.upper())?",
        "answer_1": "ABC",
        "answer_2": "abc",
        "answer_3": "Abc",
        "answer_4": "Ошибка",
        "answer_5": "None",
        "valid": "answer_1",
        "explanation": "Метод upper() преобразует все буквы строки в верхний регистр.\n"
                       "в виду чего правильный ответ 1-ый"
    },
    20: {
        "question": "Что делает функция zip()?",
        "answer_1": "Объединяет два или более итерируемых объекта в один.",
        "answer_2": "Разделяет строку на подстроки.",
        "answer_3": "Копирует элементы из одного списка в другой.",
        "answer_4": "Сортирует элементы.",
        "answer_5": "Объединяет строки.",
        "valid": "answer_1",
        "explanation": (
            "Функция zip() объединяет элементы из нескольких итерируемых объектов (например, списков или кортежей) и создает из них пары, "
            "которые помещаются в кортежи. Если длины итерируемых объектов не совпадают, zip() остановится на самом коротком из них. "
            "Это полезно, когда нужно объединить данные, например, имена и соответствующие им возраста. "
            "Пример: если у вас есть списки names = ['Alice', 'Bob'] и ages = [25, 30], то результатом будет: "
            "combined = list(zip(names, ages)) вернет [('Alice', 25), ('Bob', 30)]. "
            "Другой пример: если list1 = [1, 2, 3] и list2 = ['a', 'b', 'c'], то result = list(zip(list1, list2)) вернет [(1, 'a'), (2, 'b'), (3, 'c')]."
        )
    },
    21: {
        "question": "Какой будет результат выполнения кода print(list(zip([1, 2, 3], ['a', 'b', 'c'])))?",
        "answer_1": "[(1, 'a'), (2, 'b'), (3, 'c')]",
        "answer_2": "1, 2, 3, 'a', 'b', 'c'",
        "answer_3": "[(1, 2), (3, 'c')]",
        "answer_4": "Ошибка",
        "answer_5": "None",
        "valid": "answer_1",
        "explanation": (
            "Функция zip() объединяет элементы из двух списков: первый элемент первого списка с первым элементом второго, "
            "второй с вторым и так далее, что приводит к созданию списка кортежей. В результате выполнения кода будет получен "
            "список кортежей, содержащий пары (1, 'a'), (2, 'b'), (3, 'c'). "
            "Пример: result = list(zip([1, 2], ['x', 'y'])) вернет [(1, 'x'), (2, 'y')]. "
            "Другой пример: result = list(zip(['name1', 'name2'], [1, 2, 3])) вернет [('name1', 1), ('name2', 2)]."
        )
    },
    22: {
        "question": "Какой будет результат выполнения кода print('Hello'.find('e'))?",
        "answer_1": "1",
        "answer_2": "0",
        "answer_3": "-1",
        "answer_4": "2",
        "answer_5": "Ошибка",
        "valid": "answer_1",
        "explanation": (
            "Метод find() возвращает индекс первого вхождения заданного символа в строке. В данном случае символ 'e' находится "
            "на индексе 1 в строке 'Hello'. Если символ не найден, метод возвращает -1. "
            "Пример: index = 'Hello'.find('o') вернет 4, так как 'o' находится на четвертой позиции. "
            "Другой пример: index = 'Hello'.find('x') вернет -1, так как символ 'x' отсутствует в строке."
        )
    },
    23: {
        "question": "Какой будет результат выполнения кода print('Hello'.replace('l', 'L'))?",
        "answer_1": "HeLLo",
        "answer_2": "Hello",
        "answer_3": "HELLO",
        "answer_4": "Ошибка",
        "answer_5": "None",
        "valid": "answer_1",
        "explanation": (
            "Метод replace() заменяет все вхождения указанного символа (в данном случае 'l') на другой символ ('L'). "
            "Результатом будет строка 'HeLLo', где оба символа 'l' заменены на 'L'. "
            "Пример: result = 'banana'.replace('a', 'o') вернет 'bonono', так как все 'a' заменяются на 'o'. "
            "Другой пример: result = 'test'.replace('t', 'T') вернет 'Test', так как 't' заменяется на 'T'."
        )
    },
    24: {
        "question": "Что делает функция map()?",
        "answer_1": "Применяет заданную функцию к каждому элементу итерируемого объекта.",
        "answer_2": "Сортирует элементы.",
        "answer_3": "Создает новый список.",
        "answer_4":"Объединяет списки.",
        "answer_5": "Проверяет условия.",
        "valid": "answer_1",
        "explanation": (
            "Функция map() принимает функцию и итерируемый объект (например, список или кортеж), и применяет указанную функцию ко всем "
            "элементам этого объекта, возвращая новый итератор с результатами. Это позволяет легко обрабатывать данные в коллекциях без "
            "необходимости использования циклов. "
            "Пример: result = list(map(str, [1, 2, 3])) вернет ['1', '2', '3'], так как функция str() применяется ко всем элементам. "
            "Другой пример: result = list(map(lambda x: x * 2, [1, 2, 3])) вернет [2, 4, 6], так как функция умножает каждый элемент на 2."
        )
    },
    25: {
        "question": "Какой результат выполнения кода print(list(map(str, [1, 2, 3])))?",
        "answer_1": "['1', '2', '3']",
        "answer_2": "1, 2, 3",
        "answer_3": "[0, 1, 2]",
        "answer_4": "Ошибка",
        "answer_5": "None",
        "valid": "answer_1",
        "explanation": (
            "Функция map() (конкретно в данном случае) применяет функцию str() ко всем элементам списка [1, 2, 3], преобразуя каждое число в строку. "
            "Результатом будет новый список строк, содержащий ['1', '2', '3']. Это удобный способ преобразования типов данных в коллекциях. "
            "Пример: result = list(map(str, [4, 5, 6])) вернет ['4', '5', '6'], так как каждый элемент преобразуется в строку. "
            "Другой пример: result = list(map(str, [True, False])) вернет ['True', 'False'], так как логические значения также можно преобразовать в строки."
        )
    },
    26: {
        "question": "Какой будет результат выполнения кода print('abc'.title())?",
        "answer_1": "Abc",
        "answer_2": "ABC",
        "answer_3": "abc",
        "answer_4": "Ошибка",
        "answer_5": "None",
        "valid": "answer_1",
        "explanation": (
            "Метод title() возвращает строку с заглавными буквами в начале каждого слова. "
            "Он преобразует первую букву каждого слова в верхний регистр, а остальные буквы оставляет в нижнем регистре. "
            "Пример: если у вас есть строка 'hello world', то результат будет 'Hello World'. "
            "Другой пример: 'python programming' станет 'Python Programming'."
        )
    },
    27: {
        "question": "Какой будет результат выполнения кода print('Hello'.upper())?",
        "answer_1": "HELLO",
        "answer_2": "Hello",
        "answer_3": "Hello, world!",
        "answer_4": "Ошибка",
        "answer_5": "None",
        "valid": "answer_1",
        "explanation": (
            "Метод upper() преобразует все буквы строки в верхний регистр. "
            "Это полезно, когда нужно сделать текст более заметным или формальным. "
            "Пример: строка 'hello' станет 'HELLO'. "
            "Другой пример: 'Python' преобразуется в 'PYTHON'."
        )
    },
    28: {
        "question": "Какой будет результат выполнения кода print('Hello'.lower())?",
        "answer_1": "hello",
        "answer_2": "Hello",
        "answer_3": "HELLO",
        "answer_4": "Ошибка",
        "answer_5": "None",
        "valid": "answer_1",
        "explanation": (
            "Метод lower() преобразует все буквы строки в нижний регистр. "
            "Это может быть полезно для нормализации ввода данных или при сравнении строк. "
            "Пример: строка 'HELLO' станет 'hello'. "
            "Другой пример: 'Python Programming' преобразуется в 'python programming'."
        )
    },
    29: {
        "question": "Какой будет результат выполнения кода print('Hello'.startswith('H'))?",
        "answer_1": "True",
        "answer_2": "False",
        "answer_3": "None",
        "answer_4": "Ошибка",
        "answer_5": "0",
        "valid": "answer_1",
        "explanation": (
            "Метод startswith() проверяет, начинается ли строка с указанного символа, в данном случае с 'H'. "
            "Если строка начинается с заданного символа, метод возвращает True, иначе — False. "
            "Пример: 'Hello'.startswith('H') вернет True, а 'Hello'.startswith('h') вернет False. "
            "Другой пример: 'Python'.startswith('Py') вернет True."
        )
    },
    30: {
        "question": "Какой будет результат выполнения кода print('Hello'.endswith('o'))?",
        "answer_1": "True",
        "answer_2": "False",
        "answer_3": "None",
        "answer_4": "Ошибка",
        "answer_5": "0",
        "valid": "answer_1",
        "explanation": (
            "Метод endswith() проверяет, заканчивается ли строка на указанный символ, в данном случае на 'o'. "
            "Если строка заканчивается на заданный символ, метод возвращает True, иначе — False. "
            "Пример: 'Hello'.endswith('o') вернет True, а 'Hello'.endswith('l') вернет False. "
            "Другой пример: 'Python'.endswith('n') вернет True."
        )
    },
    31: {
        "question": "Что делает функция filter()?",
        "answer_1": "Фильтрует элементы итерируемого объекта по условию.",
        "answer_2": "Сортирует элементы.",
        "answer_3": "Создает новый список.",
        "answer_4": "Объединяет списки.",
        "answer_5": "Проверяет условия.",
        "valid": "answer_1",
        "explanation": (
            "Функция filter() фильтрует элементы итерируемого объекта, возвращая только те, которые удовлетворяют условию, "
            "предоставленному в виде функции. Это удобный способ обработки данных, позволяющий получить новый итератор. "
            "Пример: result = list(filter(lambda x: x > 0, [-1, 0, 1, 2])) вернет [1, 2], так как только 1 и 2 больше 0. "
            "Другой пример: result = list(filter(str.isdigit, ['123', 'abc', '456'])) вернет ['123', '456'], так как только они состоят из цифр."
        )
    },
    32: {
        "question": "Какой будет результат выполнения кода print(list(filter(lambda x: x > 0, [-1, 0, 1, 2])))?",
        "answer_1": "[1, 2]",
        "answer_2": "0, 1, 2",
        "answer_3": "[-1, 0, 1, 2]",
        "answer_4": "Ошибка",
        "answer_5": "None",
        "valid": "answer_1",
        "explanation": (
            "Функция filter() возвращает только те элементы итерируемого объекта, которые удовлетворяют условию, "
            "предоставленному в виде функции (в данном случае лямбда-функции). В этом примере она фильтрует положительные числа. "
            "Таким образом, результатом будет список, содержащий только положительные числа: [1, 2]. "
            "Пример: result = list(filter(lambda x: x % 2 == 0, [1, 2, 3, 4])) вернет [2, 4], так как фильтрует четные числа."
        )
    },
    33: {
        "question": "Какой будет результат выполнения кода print(len(set([1, 2, 2, 3])))?",
        "answer_1": "3",
        "answer_2": "4",
        "answer_3": "2",
        "answer_4": "1",
        "answer_5": "Ошибка",
        "valid": "answer_1",
        "explanation": (
            "Функция set() создает множество, которое автоматически удаляет дубликаты. В данном случае, из списка [1, 2, 2, 3] "
            "останутся только уникальные элементы: 1, 2 и 3. Поэтому длина уникальных элементов равна 3. "
            "Пример: len(set([1, 1, 2, 3, 3])) вернет 3, так как дубликаты удаляются. "
            "Другой пример: len(set(['a', 'b', 'b', 'c'])) вернет 3, так как в множестве будут только 'a', 'b' и 'c'."
        )
    },
    34: {
        "question": "Какой будет результат выполнения кода print(list(map(lambda x: x * 2, [1, 2, 3])))?",
        "answer_1": "[2, 4, 6]",
        "answer_2": "1, 2, 3",
        "answer_3": "[3, 6, 9]",
        "answer_4": "Ошибка",
        "answer_5": "None",
        "valid": "answer_1",
        "explanation": (
            "Функция map() применяет указанную функцию ко всем элементам итерируемого объекта. В данном случае, "
            "лямбда-функция умножает каждый элемент списка на 2. Поэтому результатом будет [2, 4, 6]. "
            "Пример: result = list(map(lambda x: x + 1, [1, 2, 3])) вернет [2, 3, 4], так как добавляет 1 к каждому элементу. "
            "Другой пример: result = list(map(str, [1, 2, 3])) вернет ['1', '2', '3'], так как преобразует числа в строки."
        )
    },
    35: {
        "question": "Какой будет результат выполнения кода print('abc'.replace('b', 'd'))?",
        "answer_1": "adc",
        "answer_2": "abc",
        "answer_3": "dbc",
        "answer_4": "Ошибка",
        "answer_5": "None",
        "valid": "answer_1",
        "explanation": (
            "Метод replace() заменяет символ 'b' на 'd', поэтому результат будет 'adc'. "
            "Этот метод находит все вхождения указанного символа и заменяет их на новый символ. "
            "Пример: 'banana'.replace('a', 'o') вернет 'bonono', так как все 'a' заменяются на 'o'. "
            "Другой пример: 'test'.replace('t', 'T') вернет 'Test', так как 't' заменяется на 'T'."
        )
    },
    36: {
        "question": "Какой будет результат выполнения кода print('Hello'.find('e'))?",
        "answer_1": "1",
        "answer_2": "0",
        "answer_3": "-1",
        "answer_4": "2",
        "answer_5": "Ошибка",
        "valid": "answer_1",
        "explanation": (
            "Метод find() возвращает индекс первого вхождения символа 'e' в строке 'Hello', который равен 1. "
            "Если символ не найден, метод возвращает -1. "
            "Пример: 'Hello'.find('o') вернет 4, так как 'o' находится на четвертой позиции. "
            "Другой пример: 'Hello'.find('x') вернет -1, так как символ 'x' отсутствует в строке."
        )
    },
    37: {
        "question": "Какой будет результат выполнения кода print('Hello'.count('l'))?",
        "answer_1": "2",
        "answer_2": "3",
        "answer_3": "1",
        "answer_4": "Ошибка",
        "answer_5": "None",
        "valid": "answer_1",
        "explanation": (
            "Метод count() возвращает количество вхождений символа 'l' в строке 'Hello', что равно 2. "
            "Этот метод позволяет подсчитывать количество раз, когда указанный символ появляется в строке. "
            "Пример: 'banana'.count('a') вернет 3, так как 'a' встречается три раза. "
            "Другой пример: 'Python'.count('o') вернет 1, так как 'o' встречается один раз."
        )
    },
    38: {
        "question": "Какой будет результат выполнения кода print('Hello, World!'.split(','))?",
        "answer_1": "['Hello', ' World!']",
        "answer_2": "'Hello', 'World!'",
        "answer_3": "['Hello, World!']",
        "answer_4": "Ошибка",
        "answer_5": "None",
        "valid": "answer_1",
        "explanation": (
            "Метод split() разделяет строку по заданному разделителю, в данном случае запятой. "
            "Результатом будет список, содержащий части строки до и после запятой. "
            "В данном случае, строка 'Hello, World!' будет разделена на 'Hello' и ' World!', "
            "что даст ['Hello', ' World!']. "
            "Пример: 'one,two,three'.split(',') вернет ['one', 'two', 'three']. "
            "Другой пример: 'apple;orange;banana'.split(';') вернет ['apple', 'orange', 'banana']."
        )
    },
    39: {
        "question": "Что делает функция any()?",
        "answer_1": "Проверяет, все ли элементы истинны.",
        "answer_2": "Проверяет, есть ли хотя бы один истинный элемент.",
        "answer_3": "Возвращает сумму всех элементов.",
        "answer_4": "Возвращает количество элементов.",
        "answer_5": "Проверяет, все ли элементы ложны.",
        "valid": "answer_2",
        "explanation": (
            "Функция any() возвращает True, если хотя бы один элемент итерируемого объекта является истинным. "
            "Если все элементы ложны, функция вернет False. "
            "Пример: any([False, False, True]) вернет True, так как есть хотя бы один истинный элемент. "
            "Другой пример: any([0, '', [], False]) вернет False, так как все элементы ложны."
        )
    },
    40: {
        "question": "Что делает функция all()?",
        "answer_1": "Проверяет, все ли элементы истинны.",
        "answer_2": "Проверяет, есть ли хотя бы один истинный элемент.",
        "answer_3": "Возвращает сумму всех элементов.",
        "answer_4": "Возвращает количество элементов.",
        "answer_5": "Проверяет, все ли элементы ложны.",
        "valid": "answer_1",
        "explanation": (
            "Функция all() возвращает True, если все элементы итерируемого объекта являются истинными. "
            "Если хотя бы один элемент ложен, функция вернет False. "
            "Пример: all([True, True, True]) вернет True, так как все элементы истинны. "
            "Другой пример: all([1, 2, 3, 0]) вернет False, так как 0 является ложным значением."
        )
    },
    41: {
        "question": "Какой будет результат выполнения следующего кода: print('abc'.upper())?",
        "answer_1": "ABC",
        "answer_2": "abc",
        "answer_3": "Abc",
        "answer_4": "Ошибка",
        "answer_5": "None",
        "valid": "answer_1",
        "explanation": (
            "Метод upper() преобразует все буквы строки в верхний регистр. "
            "Это полезно, когда нужно сделать текст более заметным или формальным. "
            "Пример: строка 'hello' станет 'HELLO'. "
            "Другой пример: 'Python'.upper() вернет 'PYTHON'. "
            "Таким образом, выполнение кода print('abc'.upper()) вернет 'ABC'."
        )
    },
    42: {
        "question": "Какой будет результат выполнения следующего кода: print('abc'.lower())?",
        "answer_1": "abc",
        "answer_2": "ABC",
        "answer_3": "Abc",
        "answer_4": "Ошибка",
        "answer_5": "None",
        "valid": "answer_1",
        "explanation": (
            "Метод lower() преобразует все буквы строки в нижний регистр. "
            "Это может быть полезно для нормализации ввода данных или при сравнении строк. "
            "Пример: строка 'HELLO' станет 'hello'. "
            "Другой пример: 'Python Programming'.lower() вернет 'python programming'. "
            "Таким образом, выполнение кода print('abc'.lower()) вернет 'abc'."
        )
    },
    43: {
        "question": "Какой будет результат выполнения следующего кода: print('abc'.title())?",
        "answer_1": "Abc",
        "answer_2": "ABC",
        "answer_3": "abc",
        "answer_4": "Ошибка",
        "answer_5": "None",
        "valid": "answer_1",
        "explanation": (
            "Метод title() возвращает строку с заглавными буквами в начале каждого слова. "
            "Он преобразует первую букву каждого слова в верхний регистр, а остальные буквы оставляет в нижнем регистре. "
            "Пример: строка 'hello world' станет 'Hello World'. "
            "Другой пример: 'python programming'.title() вернет 'Python Programming'. "
            "Таким образом, выполнение кода print('abc'.title()) вернет 'Abc'."
        )
    },
    44: {
        "question": "Какой будет результат выполнения следующего кода: print(sorted(3, 1, 2))?",
        "answer_1": "[1, 2, 3]",
        "answer_2": "3, 1, 2",
        "answer_3": "[2, 3, 1]",
        "answer_4": "Ошибка",
        "answer_5": "None",
        "valid": "answer_4",
        "explanation": (
            "Функция sorted() принимает итерируемый объект, а в данном случае переданы три отдельных числа, что приводит к ошибке. "
            "Для правильного использования sorted() нужно передавать итерируемый объект, например, список. "
            "Пример: sorted([3, 1, 2]) вернет [1, 2, 3]. "
            "Другой пример: sorted('hello') вернет ['e', 'h', 'l', 'l', 'o'], так как сортирует символы строки."
        )
    },
    45: {
        "question": "Какой будет результат выполнения следующего кода: print(list(zip(1, 2, 3, 4, 5, 6)))?",
        "answer_1": "[(1, 4), (2, 5), (3, 6)]",
        "answer_2": "1, 2, 3, 4, 5, 6",
        "answer_3": "Ошибка",
        "answer_4": "None",
        "answer_5": "0",
        "valid": "answer_3",
        "explanation": (
            "Функция zip() объединяет элементы из нескольких итерируемых объектов в кортежи. Однако в данном случае переданы отдельные числа, "
            "что приводит к ошибке. Для правильного использования zip() нужно передавать итерируемые объекты, например, списки. "
            "Пример: zip([1, 2, 3], [4, 5, 6]) вернет [(1, 4), (2, 5), (3, 6)]. "
            "Другой пример: zip('abc', '123') вернет [('a', '1'), ('b', '2'), ('c', '3')]."
        )
    },
    46: {
        "question": "Какой будет результат выполнения следующего кода: print('Hello'.find('l'))?",
        "answer_1": "2",
        "answer_2": "1",
        "answer_3": "-1",
        "answer_4": "0",
        "answer_5": "Ошибка",
        "valid": "answer_1",
        "explanation": (
            "Метод find() возвращает индекс первого вхождения заданного символа в строке. В данном случае символ 'l' находится "
            "на индексе 2 в строке 'Hello'. Если символ не найден, метод возвращает -1. "
            "Пример: 'Hello'.find('o') вернет 4, так как 'o' находится на четвертой позиции. "
            "Другой пример: 'Hello'.find('x') вернет -1, потому что символ 'x' отсутствует в строке."
        )
    },
    47: {
        "question": "Какой будет результат выполнения следующего кода: print('Hello'.count('l'))?",
        "answer_1": "2",
        "answer_2": "1",
        "answer_3": "3",
        "answer_4": "Ошибка",
        "answer_5": "None",
        "valid": "answer_1",
        "explanation": (
            "Метод count() возвращает количество вхождений заданного символа в строке. В данном случае метод count('l') "
            "возвращает 2, так как символ 'l' встречается дважды в строке 'Hello'. "
            "Пример: 'banana'.count('a') вернет 3, так как 'a' встречается три раза. "
            "Другой пример: 'Python'.count('o') вернет 1, так как 'o' встречается один раз."
        )
    },
    48: {
        "question": "Какой будет результат выполнения следующего кода: print('abc'.replace('b', 'd'))?",
        "answer_1": "adc",
        "answer_2": "abc",
        "answer_3": "dbc",
        "answer_4": "Ошибка",
        "answer_5": "None",
        "valid": "answer_1",
        "explanation": (
            "Метод replace() заменяет все вхождения указанного символа на другой символ. В данном случае символ 'b' "
            "заменяется на 'd', поэтому результат будет 'adc'. "
            "Пример: 'banana'.replace('a', 'o') вернет 'bonono', так как все 'a' заменяются на 'o'. "
            "Другой пример: 'test'.replace('t', 'T') вернет 'Test', так как 't' заменяется на 'T'."
        )
    },
    49: {
        "question": "Какой будет результат выполнения следующего кода: print('abc'.split(','))?",
        "answer_1": "['abc']",
        "answer_2": "['a', 'b', 'c']",
        "answer_3": "['abc']",
        "answer_4": "Ошибка",
        "answer_5": "None",
        "valid": "answer_1",
        "explanation": (
            "Метод split(',') разделяет строку по запятой. Так как в строке 'abc' запятой нет, метод возвращает всю строку как единственный элемент списка: ['abc']. "
            "Пример: 'one,two,three'.split(',') вернет ['one', 'two', 'three'], так как строка содержит запятые. "
            "Другой пример: 'apple;orange;banana'.split(';') вернет ['apple', 'orange', 'banana'], так как разделение происходит по точке с запятой."
        )
    },
    50: {
        "question": "Какой будет результат выполнения следующего кода: print('  Hello  '.strip())?",
        "answer_1": "'Hello'",
        "answer_2": "'  Hello  '",
        "answer_3": "Ошибка",
        "answer_4": "None",
        "answer_5": "'Hello  '",
        "valid": "answer_1",
        "explanation": (
            "Метод strip() удаляет пробелы в начале и в конце строки, поэтому результат будет 'Hello'. "
            "Пример: '   Python   '.strip() вернет 'Python', так как все пробелы будут удалены. "
            "Другой пример: '   Test   '.strip() вернет 'Test'. "
            "Этот метод полезен при обработке пользовательского ввода, чтобы избежать лишних пробелов."
        )
    },
    51: {
        "question": "Какой будет результат выполнения следующего кода: print('Hello'.isupper())?",
        "answer_1": "False",
        "answer_2": "True",
        "answer_3": "None",
        "answer_4": "Ошибка",
        "answer_5": "0",
        "valid": "answer_1",
        "explanation": (
            "Метод isupper() проверяет, все ли буквы строки в верхнем регистре, и возвращает False для 'Hello', "
            "так как только первая буква заглавная, а остальные — строчные. "
            "Пример: 'WORLD'.isupper() вернет True, так как все буквы в верхнем регистре. "
            "Другой пример: 'Python'.isupper() вернет False, так как первая буква заглавная, а остальные — строчные."
        )
    },
    52: {
        "question": "Какой будет результат выполнения следующего кода: print('Hello'.isalpha())?",
        "answer_1": "True",
        "answer_2": "False",
        "answer_3": "None",
        "answer_4": "Ошибка",
        "answer_5": "0",
        "valid": "answer_1",
        "explanation": (
            "Метод isalpha() проверяет, состоит ли строка только из букв, и возвращает True для 'Hello', "
            "так как строка состоит исключительно из букв английского алфавита. "
            "Пример: 'Python'.isalpha() вернет True. "
            "Однако 'Python3'.isalpha() вернет False, так как строка содержит цифру."
        )
    },
    53: {
        "question": "Какой будет результат выполнения следующего кода: print('123'.isdigit())?",
        "answer_1": "True",
        "answer_2": "False",
        "answer_3": "None",
        "answer_4": "Ошибка",
        "answer_5": "0",
        "valid": "answer_1",
        "explanation": (
            "Метод isdigit() проверяет, состоит ли строка только из цифр, и возвращает True для '123', "
            "так как все символы в строке являются цифрами. "
            "Пример: '456'.isdigit() вернет True, так как все символы — цифры. "
            "Однако '123abc'.isdigit() вернет False, так как строка содержит буквы."
        )
    },
    54: {
        "question": "Какой будет результат выполнения следующего кода: print('Hello'.endswith('o'))?",
        "answer_1": "True",
        "answer_2": "False",
        "answer_3": "None",
        "answer_4": "Ошибка",
        "answer_5": "0",
        "valid": "answer_1",
        "explanation": (
            "Метод endswith() проверяет, заканчивается ли строка на указанный символ, в данном случае на 'o'. "
            "В строке 'Hello' последний символ — 'o', поэтому метод возвращает True. "
            "Пример: 'Python'.endswith('n') вернет True, так как строка заканчивается на 'n'. "
            "Другой пример: 'World'.endswith('d') вернет True, так как строка заканчивается на 'd'."
        )
    },
    55: {
        "question": "Что делает функция reversed()?",
        "answer_1": "Возвращает обратный порядок элементов итерируемого объекта.",
        "answer_2": "Сортирует элементы.",
        "answer_3": "Создает новый список.",
        "answer_4": "Объединяет списки.",
        "answer_5": "Проверяет условия.",
        "valid": "answer_1",
        "explanation": (
            "Функция reversed() возвращает итератор, который перебирает элементы в обратном порядке. "
            "Эта функция полезна, когда нужно изменить порядок элементов, например, в списке или строке. "
            "Пример: result = list(reversed([1, 2, 3])) вернет [3, 2, 1], так как порядок элементов изменен на обратный. "
            "Другой пример: result = ''.join(reversed('hello')) вернет 'olleh', так как порядок символов в строке также изменен."
        )
    },
    56: {
        "question": "Какой будет результат выполнения кода print(list(reversed([1, 2, 3])))?",
        "answer_1": "[3, 2, 1]",
        "answer_2": "[1, 2, 3]",
        "answer_3": "[1, 3, 2]",
        "answer_4": "Ошибка",
        "answer_5": "None",
        "valid": "answer_1",
        "explanation": (
            "Функция reversed() возвращает итератор, который перебирает элементы в обратном порядке. "
            "Когда мы оборачиваем его в функцию list(), получаем список, содержащий элементы в обратном порядке. "
            "Таким образом, выполнение кода print(list(reversed([1, 2, 3]))) вернет [3, 2, 1]. "
            "Пример: result = list(reversed(['a', 'b', 'c'])) вернет ['c', 'b', 'a']. "
            "Другой пример: result = list(reversed(range(5))) вернет [4, 3, 2, 1, 0]."
        )
    },
    57: {
        "question": "Какой будет результат выполнения кода print('Hello'.capitalize())?",
        "answer_1": "Hello",
        "answer_2": "hello",
        "answer_3": "HELLO",
        "answer_4": "Ошибка",
        "answer_5": "None",
        "valid": "answer_1",
        "explanation": (
            "Метод capitalize() делает первую букву строки заглавной, а все остальные буквы — строчными. "
            "В данном случае строка уже начинается с заглавной буквы, поэтому результат будет 'Hello'. "
            "Пример: 'hello world'.capitalize() вернет 'Hello world'. "
            "Другой пример: 'python'.capitalize() вернет 'Python'."
        )
    },
    58: {
        "question": "Какой будет результат выполнения кода print('Hello World'.split())?",
        "answer_1": "['Hello', 'World']",
        "answer_2": "['Hello World']",
        "answer_3": "Ошибка",
        "answer_4": "None",
        "answer_5": "0",
        "valid": "answer_1",
        "explanation": (
            "Метод split() без аргументов разделяет строку по пробелам. "
            "В результате выполнения кода 'Hello World'.split() получаем список ['Hello', 'World'], "
            "так как строка была разбита на части по пробелу. "
            "Пример: 'a b c'.split() вернет ['a', 'b', 'c']. "
            "Другой пример: 'one;two;three'.split(';') вернет ['one', 'two', 'three'], так как разделение происходит по точке с запятой."
        )
    },
    59: {
        "question": "Какой будет результат выполнения кода print('Hello'.replace('l', 'p'))?",
        "answer_1": "Heppo",
        "answer_2": "Hello",
        "answer_3": "HepPo",
        "answer_4": "Ошибка",
        "answer_5": "None",
        "valid": "answer_1",
        "explanation": (
            "Метод replace() заменяет все вхождения указанного символа (в данном случае 'l') на другой символ ('p'). "
            "В результате выполнения кода 'Hello'.replace('l', 'p') строка станет 'Heppo', так как оба 'l' заменяются на 'p'. "
            "Пример: 'banana'.replace('a', 'o') вернет 'bonono', так как все 'a' заменяются на 'o'. "
            "Другой пример: 'test'.replace('t', 'T') вернет 'Test', так как 't' заменяется на 'T'."
        )
    },
    60: {
        "question": "Какой будет результат выполнения кода print('Python'.count('y'))?",
        "answer_1": "1",
        "answer_2": "0",
        "answer_3": "2",
        "answer_4": "Ошибка",
        "answer_5": "None",
        "valid": "answer_1",
        "explanation": (
            "Метод count() возвращает количество вхождений заданного символа в строке. В данном случае метод count('y') вернет 1, "
            "так как символ 'y' встречается один раз в строке 'Python'. "
            "Пример: 'banana'.count('a') вернет 3, так как 'a' встречается три раза. "
            "Другой пример: 'Python'.count('o') вернет 0, так как 'o' отсутствует в строке."
        )
    },
    61: {
        "question": "Какой будет результат выполнения кода print('abc'.find('d'))?",
        "answer_1": "-1",
        "answer_2": "0",
        "answer_3": "3",
        "answer_4": "Ошибка",
        "answer_5": "None",
        "valid": "answer_1",
        "explanation": (
            "Метод find() возвращает индекс первого вхождения заданного символа в строке. Если символ не найден, метод возвращает -1. "
            "В данном случае, так как символ 'd' отсутствует в строке 'abc', метод find('d') вернет -1. "
            "Пример: 'Hello'.find('o') вернет 4, так как 'o' находится на четвертой позиции. "
            "Другой пример: 'Hello'.find('x') вернет -1, так как символ 'x' отсутствует в строке."
        )
    },
    62: {
        "question": "Какой будет результат выполнения кода print('Hello, World!'.replace('World', 'Python'))?",
        "answer_1": "Hello, Python!",
        "answer_2": "Hello, World!",
        "answer_3": "Hello, Python",
        "answer_4": "Ошибка",
        "answer_5": "None",
        "valid": "answer_1",
        "explanation": (
            "Метод replace() заменяет указанную подстроку ('World') на другую подстроку ('Python'). "
            "В данном случае строка 'Hello, World!' будет преобразована в 'Hello, Python!'. "
            "Пример: 'I love apples'.replace('apples', 'oranges') вернет 'I love oranges'. "
            "Другой пример: 'Goodbye, John'.replace('John', 'Alice') вернет 'Goodbye, Alice'."
        )
    },
    63: {
        "question": "Какой будет результат выполнения кода print('   Hello   '.strip())?",
        "answer_1": "'Hello'",
        "answer_2": "'   Hello   '",
        "answer_3": "'Hello   '",
        "answer_4": "Ошибка",
        "answer_5": "None",
        "valid": "answer_1",
        "explanation": (
            "Метод strip() удаляет пробелы в начале и в конце строки. В данном случае строка '   Hello   ' "
            "будет преобразована в 'Hello'. "
            "Пример: '   Python   '.strip() вернет 'Python', так как все пробелы будут удалены. "
            "Другой пример: '   Test   '.strip() вернет 'Test'. Этот метод полезен при обработке пользовательского ввода."
        )
    },
    64: {
        "question": "Какой будет результат выполнения кода print('abc'.isdigit())?",
        "answer_1": "False",
        "answer_2": "True",
        "answer_3": "None",
        "answer_4": "Ошибка",
        "answer_5": "0",
        "valid": "answer_1",
        "explanation": (
            "Метод isdigit() проверяет, состоит ли строка только из цифр, и возвращает False для 'abc', "
            "так как в строке есть буквы. "
            "Пример: '123'.isdigit() вернет True, так как все символы в строке являются цифрами. "
            "Другой пример: '456abc'.isdigit() вернет False, так как строка содержит буквы."
        )
    },
    65: {
        "question": "Какой будет результат выполнения кода print('12345'.isnumeric())?",
        "answer_1": "True",
        "answer_2": "False",
        "answer_3": "None",
        "answer_4": "Ошибка",
        "answer_5": "0",
        "valid": "answer_1",
        "explanation": (
            "Метод isnumeric() проверяет, состоит ли строка только из чисел, включая цифры и числовые символы. "
            "В данном случае строка '12345' состоит исключительно из чисел, поэтому метод вернет True. "
            "Пример: '456'.isnumeric() вернет True, так как строка состоит из цифр. "
            "Другой пример: 'abc123'.isnumeric() вернет False, так как строка содержит буквы."
        )
    },
    66: {
        "question": "Какой будет результат выполнения кода print('abc'.islower())?",
        "answer_1": "True",
        "answer_2": "False",
        "answer_3": "None",
        "answer_4": "Ошибка",
        "answer_5": "0",
        "valid": "answer_1",
        "explanation": (
            "Метод islower() проверяет, все ли буквы строки находятся в нижнем регистре. "
            "В данном случае строка 'abc' состоит полностью из строчных букв, поэтому метод вернет True. "
            "Пример: 'hello'.islower() вернет True, так как все буквы строчные. "
            "Другой пример: 'Hello'.islower() вернет False, так как первая буква заглавная."
        )
    },
    67: {
        "question": "Какой будет результат выполнения кода print('   '.isspace())?",
        "answer_1": "True",
        "answer_2": "False",
        "answer_3": "None",
        "answer_4": "Ошибка",
        "answer_5": "0",
        "valid": "answer_1",
        "explanation": (
            "Метод isspace() проверяет, состоит ли строка только из пробелов и других пробельных символов (например, табуляции). "
            "В данном случае строка '   ' состоит только из пробелов, поэтому метод вернет True. "
            "Пример: '  \t\n'.isspace() также вернет True, так как содержит пробел и табуляцию. "
            "Другой пример: 'a '.isspace() вернет False, так как строка содержит букву."
        )
    },
    68: {
        "question": "Какой будет результат выполнения кода print('Hello'.swapcase())?",
        "answer_1": "hELLO",
        "answer_2": "hello",
        "answer_3": "HELLO",
        "answer_4": "Ошибка",
        "answer_5": "None",
        "valid": "answer_1",
        "explanation": (
            "Метод swapcase() меняет регистр каждой буквы в строке: заглавные буквы становятся строчными, а строчные — заглавными. "
            "В данном случае строка 'Hello' преобразуется в 'hELLO'. "
            "Пример: 'Python'.swapcase() вернет 'pYTHON', так как каждая буква меняет свой регистр. "
            "Другой пример: 'abcDEF'.swapcase() вернет 'ABCdef'."
        )
    },
    69: {
        "question": "Какой будет результат выполнения кода print('Hello'.center(20))?",
        "answer_1": "    Hello     ",
        "answer_2": "Hello",
        "answer_3": "Hello,",
        "answer_4": "Ошибка",
        "answer_5": "None",
        "valid": "answer_1",
        "explanation": (
            "Метод center(20) центрирует строку в строке длиной 20 символов, добавляя пробелы с обеих сторон. "
            "В данном случае строка 'Hello' будет дополнена пробелами, чтобы общая длина составила 20 символов, "
            "поэтому результат будет '    Hello     '. "
            "Пример: 'abc'.center(10) вернет '   abc    '. "
            "Другой пример: 'test'.center(15) вернет '      test      '."
        )
    },
    70: {
        "question": "Какой будет результат выполнения кода print('Hello World'.split())?",
        "answer_1": "['Hello', 'World']",
        "answer_2": "'Hello World'",
        "answer_3": "Ошибка",
        "answer_4": "None",
        "answer_5": "0",
        "valid": "answer_1",
        "explanation": (
            "Метод split() без аргументов разделяет строку по пробелам. "
            "В результате выполнения кода 'Hello World'.split() будет возвращен список, содержащий ['Hello', 'World'], "
            "так как строка была разбита на части по пробелу. "
            "Пример: 'one two three'.split() вернет ['one', 'two', 'three']. "
            "Другой пример: 'apple;orange;banana'.split(';') вернет ['apple', 'orange', 'banana'], так как разделение происходит по точке с запятой."
        )
    },
    71: {
        "question": "Какой будет результат выполнения кода print(list('Hello'))?",
        "answer_1": "['H', 'e', 'l', 'l', 'o']",
        "answer_2": "'Hello'",
        "answer_3": "Ошибка",
        "answer_4": "None",
        "answer_5": "0",
        "valid": "answer_1",
        "explanation": (
            "Функция list() преобразует строку в список символов, поэтому результат будет ['H', 'e', 'l', 'l', 'o']. "
            "Каждый символ строки становится отдельным элементом списка. "
            "Пример: list('Python') вернет ['P', 'y', 't', 'h', 'o', 'n']. "
            "Другой пример: list('abc') вернет ['a', 'b', 'c']. Это полезно, когда нужно манипулировать отдельными символами строки."
        )
    },
    72: {
        "question": "Какой будет результат выполнения кода print('abc'.find('b'))?",
        "answer_1": "1",
        "answer_2": "0",
        "answer_3": "-1",
        "answer_4": "2",
        "answer_5": "Ошибка",
        "valid": "answer_1",
        "explanation": (
            "Метод find() возвращает индекс первого вхождения заданного символа в строке. "
            "В данном случае символ 'b' находится на индексе 1 в строке 'abc'. Если символ не найден, метод find возвращает -1. "
            "Пример: 'Hello'.find('o') вернет 4, так как 'o' находится на четвертой позиции. "
            "Другой пример: 'abc'.find('d') вернет -1, так как символ 'd' отсутствует в строке."
        )
    },
    73: {
        "question": "Какой будет результат выполнения кода print('Hello'.endswith('lo'))?",
        "answer_1": "True",
        "answer_2": "False",
        "answer_3": "None",
        "answer_4": "Ошибка",
        "answer_5": "0",
        "valid": "answer_1",
        "explanation": (
            "Метод endswith() проверяет, заканчивается ли строка на указанный символ или подстроку. "
            "В данном случае строка 'Hello' заканчивается на 'lo', поэтому метод вернет True. "
            "Пример: 'Python'.endswith('n') вернет True, так как строка заканчивается на 'n'. "
            "Другой пример: 'World'.endswith('d') вернет True, так как строка заканчивается на 'd'."
        )
    },
    74: {
        "question": "Какой будет результат выполнения кода print('abc'.isalpha())?",
        "answer_1": "True",
        "answer_2": "False",
        "answer_3": "None",
        "answer_4": "Ошибка",
        "answer_5": "0",
        "valid": "answer_1",
        "explanation": (
            "Метод isalpha() проверяет, состоит ли строка только из букв, и возвращает True для 'abc', "
            "так как строка состоит исключительно из букв английского алфавита. "
            "Пример: 'Python'.isalpha() вернет True. "
            "Однако 'Python3'.isalpha() вернет False, так как строка содержит цифру."
        )
    },
    75: {
        "question": "Какой будет результат выполнения кода print('   '.isspace())?",
        "answer_1": "True",
        "answer_2": "False",
        "answer_3": "None",
        "answer_4": "Ошибка",
        "answer_5": "0",
        "valid": "answer_1",
        "explanation": (
            "Метод isspace() проверяет, состоит ли строка только из пробелов и других пробельных символов (например, табуляции). "
            "В данном случае строка '   ' состоит только из пробелов, поэтому метод вернет True. "
            "Пример: '  \t\n'.isspace() также вернет True, так как содержит пробел и табуляцию. "
            "Другой пример: 'a '.isspace() вернет False, так как строка содержит букву."
        )
    },
    76: {
        "question": "Какой будет результат выполнения кода print('abc'.swapcase())?",
        "answer_1": "ABC",
        "answer_2": "abc",
        "answer_3": "Abc",
        "answer_4": "Ошибка",
        "answer_5": "None",
        "valid": "answer_1",
        "explanation": (
            "Метод swapcase() меняет регистр каждой буквы в строке: заглавные буквы становятся строчными, "
            "а строчные — заглавными. В данном случае строка 'abc' станет 'ABC'. "
            "Пример: 'Python'.swapcase() вернет 'pYTHON', так как каждая буква меняет свой регистр. "
            "Другой пример: 'HELLO'.swapcase() вернет 'hello'."
        )
    },
    77: {
        "question": "Какой будет результат выполнения кода print('Hello'.capitalize())?",
        "answer_1": "Hello",
        "answer_2": "hello",
        "answer_3": "HELLO",
        "answer_4": "Ошибка",
        "answer_5": "None",
        "valid": "answer_1",
        "explanation": (
            "Метод capitalize() делает первую букву строки заглавной, а все остальные буквы — строчными. "
            "В данном случае строка 'Hello' уже начинается с заглавной буквы, поэтому результат будет 'Hello'. "
            "Пример: 'hello world'.capitalize() вернет 'Hello world'. "
            "Другой пример: 'python'.capitalize() вернет 'Python'."
        )
    },
    78: {
        "question": "Какой будет результат выполнения кода print('abc'.join(['d', 'e']))?",
        "answer_1": "deabc",
        "answer_2": "dabcabc",
        "answer_3": "abcde",
        "answer_4": "Ошибка",
        "answer_5": "None",
        "valid": "answer_2",
        "explanation": (
            "Метод join() объединяет элементы итерируемого объекта, используя строку, к которой применяется метод, в качестве разделителя. "
            "В данном случае 'abc'.join(['d', 'e']) будет работать следующим образом: между элементами 'd' и 'e' будет вставлена строка 'abc', "
            "что даст 'dabcabc'. "
            "Пример: '-'.join(['2022', '01', '01']) вернет '2022-01-01'. "
            "Другой пример: ' '.join(['Hello', 'World']) вернет 'Hello World'."
        )
    },
    79: {
        "question": "Какой будет результат выполнения кода print('abc'.islower())?",
        "answer_1": "True",
        "answer_2": "False",
        "answer_3": "None",
        "answer_4": "Ошибка",
        "answer_5": "0",
        "valid": "answer_1",
        "explanation": (
            "Метод islower() проверяет, все ли буквы строки находятся в нижнем регистре. "
            "В данном случае строка 'abc' состоит полностью из строчных букв, поэтому метод вернет True. "
            "Пример: 'HELLO'.islower() вернет False, так как все буквы заглавные. "
            "Другой пример: 'Hello'.islower() вернет False, так как первая буква заглавная."
        )
    },
    80: {
        "question": "Какой будет результат выполнения кода print('   '.isspace())?",
        "answer_1": "True",
        "answer_2": "False",
        "answer_3": "None",
        "answer_4": "Ошибка",
        "answer_5": "0",
        "valid": "answer_1",
        "explanation": (
            "Метод isspace() проверяет, состоит ли строка только из пробелов и других пробельных символов (например, табуляции). "
            "В данном случае строка '   ' состоит только из пробелов, поэтому метод вернет True. "
            "Пример: '  \t\n'.isspace() также вернет True, так как содержит пробел и табуляцию. "
            "Другой пример: 'a '.isspace() вернет False, так как строка содержит букву."
        )
    },
    81: {
        "question": "Какой будет результат выполнения кода print('Hello'.capitalize())?",
        "answer_1": "Hello",
        "answer_2": "hello",
        "answer_3": "HELLO",
        "answer_4": "Ошибка",
        "answer_5": "None",
        "valid": "answer_1",
        "explanation": (
            "Метод capitalize() делает первую букву строки заглавной, а все остальные буквы — строчными. "
            "В данном случае строка 'Hello' уже начинается с заглавной буквы, поэтому результат будет 'Hello'. "
            "Пример: 'hello world'.capitalize() вернет 'Hello world'. "
            "Другой пример: 'python'.capitalize() вернет 'Python'."
        )
    },
    82: {
        "question": "Что выведет следующая функция?\n\n"
                    "def multiply_list(numbers):\n"
                    "    result = 1\n"
                    "    for number in numbers:\n"
                    "        result *= number\n"
                    "    return result\n"
                    "print(multiply_list([1, 2, 3, 4]))",
        "answer_1": "24",
        "answer_2": "10",
        "answer_3": "6",
        "answer_4": "Ошибка",
        "answer_5": "None",
        "valid": "answer_1",
        "explanation": (
            "Функция multiply_list(numbers) перемножает все числа в списке. "
            "В данном случае список [1, 2, 3, 4] будет перемножен, что вернет 24. "
            "Пример: multiply_list([2, 5]) вернет 10. "
            "Если передать пустой список, например multiply_list([]), функция вернет 1, так как начальное значение result равно 1."
        )
    },
    83: {
        "question": "Что выведет следующая функция?\n\n"
                    "def count_vowels(string):\n"
                    "    return sum(1 for char in string if char in 'aeiouAEIOU')\n"
                    "print(count_vowels('Hello, World!'))",
        "answer_1": "3",
        "answer_2": "2",
        "answer_3": "0",
        "answer_4": "Ошибка",
        "answer_5": "None",
        "valid": "answer_2",
        "explanation": (
            "Функция count_vowels(string) подсчитывает количество гласных букв в строке. "
            "В строке 'Hello, World!' есть две гласные: 'e' и 'o', поэтому результат будет 2. "
            "Пример: count_vowels('Python') вернет 1, так как только 'o' является гласной. "
            "Другой пример: count_vowels('xyz') вернет 0, так как в строке нет гласных."
        )
    },
    84: {
        "question": "Что выведет следующая функция?\n\n"
                    "def reverse_string(s):\n"
                    "    return s[::-1]\n"
                    "print(reverse_string('Python'))",
        "answer_1": "nohtyP",
        "answer_2": "Python",
        "answer_3": "Ошибка",
        "answer_4": "None",
        "answer_5": "0",
        "valid": "answer_1",
        "explanation": (
            "Функция reverse_string(s) возвращает строку в обратном порядке с использованием срезов. "
            "В данном случае строка 'Python' будет преобразована в 'nohtyP'. "
            "Пример: reverse_string('Hello') вернет 'olleH'. "
            "Другой пример: reverse_string('12345') вернет '54321'."
        )
    },
    85: {
        "question": "Что выведет следующая функция?\n\n"
                    "def func2(a, b):\n"
                    "    if a > b:\n"
                    "        return a\n"
                    "    else:\n"
                    "        return b\n"
                    "print(func2(3, 5))",
        "answer_1": "5",
        "answer_2": "3",
        "answer_3": "Ошибка",
        "answer_4": "None",
        "answer_5": "0",
        "valid": "answer_1",
        "explanation": (
            "Функция func2(a, b) сравнивает два числа и возвращает большее из них. "
            "В данном случае, поскольку 5 больше 3, функция вернет 5. "
            "Пример: func2(10, 20) вернет 20. "
            "Если передать одинаковые числа, например, func2(5, 5), функция вернет 5, так как они равны."
        )
    },
    86: {
        "question": "Что выведет следующая функция?\n\n"
                    "def func3(numbers):\n"
                    "    total = 0\n"
                    "    for number in numbers:\n"
                    "        total += number\n"
                    "    return total\n"
                    "print(func3([1, 2, 3, 4, 5]))",
        "answer_1": "15",
        "answer_2": "10",
        "answer_3": "Ошибка",
        "answer_4": "None",
        "answer_5": "0",
        "valid": "answer_1",
        "explanation": (
            "Функция func3(numbers) суммирует все числа в переданном списке. "
            "В данном случае функция будет складывать числа 1, 2, 3, 4 и 5, что даст 15. "
            "Пример: func3([10, 20, 30]) вернет 60. "
            "Если передать пустой список, например, func3([]), функция вернет 0, так как нет элементов для сложения."
        )
    },
    87: {
        "question": "Что выведет следующая функция?\n\n"
                    "def func4(s):\n"
                    "    vowels = 'aeiou'\n"
                    "    count = 0\n"
                    "    for char in s:\n"
                    "        if char in vowels:\n"
                    "            count += 1\n"
                    "    return count\n"
                    "print(func4('Hello, World!'))",
        "answer_1": "3",
        "answer_2": "2",
        "answer_3": "5",
        "answer_4": "Ошибка",
        "answer_5": "0",
        "valid": "answer_2",
        "explanation": (
            "Функция func4(s) подсчитывает количество гласных букв в строке. "
            "В строке 'Hello, World!' есть две гласные: 'e' и 'o', поэтому результат будет 2. "
            "Пример: func4('Python') вернет 1, так как только 'o' является гласной. "
            "Другой пример: func4('xyz') вернет 0, так как в строке нет гласных."
        )
    },
    88: {
        "question": "Что выведет следующая функция?\n\n"
                    "def func5(s):\n"
                    "    return s == s[::-1]\n"
                    "print(func5('racecar'))",
        "answer_1": "True",
        "answer_2": "False",
        "answer_3": "Ошибка",
        "answer_4": "None",
        "answer_5": "0",
        "valid": "answer_1",
        "explanation": (
            "Функция func5(s) проверяет, является ли строка палиндромом, сравнивая строку с её обратной версией. "
            "В данном случае строка 'racecar' читается одинаково с обеих сторон, поэтому результат будет True. "
            "Пример: func5('level') вернет True, так как 'level' также палиндром. "
            "Другой пример: func5('hello') вернет False, так как 'hello' не является палиндромом."
        )
    },
    89: {
        "question": "Что выведет следующая функция?\n\n"
                    "def func6(numbers):\n"
                    "    return [n * 2 for n in numbers]\n"
                    "print(func6([1, 2, 3]))",
        "answer_1": "[2, 4, 6]",
        "answer_2": "[1, 2, 3]",
        "answer_3": "[3, 6, 9]",
        "answer_4": "Ошибка",
        "answer_5": "None",
        "valid": "answer_1",
        "explanation": (
            "Функция func6(numbers) использует генератор списка для умножения каждого элемента списка на 2. "
            "В данном случае, переданный список [1, 2, 3] будет обработан и вернет [2, 4, 6]. "
            "Пример: func6([4, 5, 6]) вернет [8, 10, 12]. "
            "Другой пример: func6([0, -1, -2]) вернет [0, -2, -4]."
        )
    },
    90: {
        "question": "Что выведет следующая функция?\n\n"
                    "def func8():\n"
                    "    return [x for x in range(5) if x % 2 == 0]\n"
                    "print(func8())",
        "answer_1": "[0, 2, 4]",
        "answer_2": "[1, 3]",
        "answer_3": "[0, 1, 2, 3, 4]",
        "answer_4": "Ошибка",
        "answer_5": "None",
        "valid": "answer_1",
        "explanation": (
            "Функция func8() создает список четных чисел от 0 до 4. "
            "Используя генератор списка и условие, функция выбирает только те числа, которые делятся на 2 без остатка. "
            "В результате выполнения кода будет возвращен список [0, 2, 4]. "
            "Пример: если бы мы изменили условие на x % 2 != 0, то результат был бы [1, 3]."
        )
    },
    91: {
        "question": "Что выведет следующая функция?\n\n"
                    "def func1(n):\n"
                    "    if n < 0:\n"
                    "        return 'Отрицательное число'\n"
                    "    elif n == 0:\n"
                    "        return 'Ноль'\n"
                    "    else:\n"
                    "        return 'Положительное число'\n"
                    "print(func1(-5))",
        "answer_1": "'Отрицательное число'",
        "answer_2": "'Ноль'",
        "answer_3": "'Положительное число'",
        "answer_4": "Ошибка",
        "answer_5": "None",
        "valid": "answer_1",
        "explanation": (
            "Функция func1(n) проверяет, является ли число отрицательным, нулем или положительным. "
            "В данном случае, так как передано -5, функция вернет 'Отрицательное число'. "
            "Пример: func1(0) вернет 'Ноль'. "
            "Другой пример: func1(5) вернет 'Положительное число'."
        )
    },
    92: {
        "question": "Что выведет следующая функция?\n\n"
                    "def func2(lst):\n"
                    "    result = []\n"
                    "    for i in lst:\n"
                    "        if i % 2 == 0:\n"
                    "            result.append(i)\n"
                    "    return result\n"
                    "print(func2([1, 2, 3, 4, 5, 6]))",
        "answer_1": "[2, 4, 6]",
        "answer_2": "[1, 3, 5]",
        "answer_3": "[2, 3, 4]",
        "answer_4": "Ошибка",
        "answer_5": "None",
        "valid": "answer_1",
        "explanation": (
            "Функция func2(lst) принимает список и возвращает новый список, содержащий только четные числа. "
            "В данном случае, из списка [1, 2, 3, 4, 5, 6] будут выбраны 2, 4 и 6, что даст результат [2, 4, 6]. "
            "Пример: func2([10, 15, 20]) вернет [10, 20]. "
            "Если бы список не содержал четных чисел, например, func2([1, 3, 5]), функция вернула бы пустой список []."
        )
    },
    93: {
        "question": "Что выведет следующая функция?\n\n"
                    "def func3(s):\n"
                    "    count = 0\n"
                    "    for char in s:\n"
                    "        if char in 'aeiouAEIOU':\n"
                    "            count += 1\n"
                    "    return count\n"
                    "print(func3('Hello, World!'))",
        "answer_1": "3",
        "answer_2": "2",
        "answer_3": "5",
        "answer_4": "Ошибка",
        "answer_5": "0",
        "valid": "answer_2",
        "explanation": (
            "Функция func3(s) подсчитывает количество гласных букв в строке. "
            "В строке 'Hello, World!' есть две гласные: 'e' и 'o', поэтому результат будет 2. "
            "Пример: func3('Python') вернет 1, так как только 'o' является гласной. "
            "Другой пример: func3('xyz') вернет 0, так как в строке нет гласных."
        )
    },
    94: {
        "question": "Что выведет следующая функция?\n\n"
                    "def func4(n):\n"
                    "    return [i * i for i in range(n)]\n"
                    "print(func4(3))",
        "answer_1": "[0, 1, 4]",
        "answer_2": "[1, 4, 9]",
        "answer_3": "[0, 1, 2, 3]",
        "answer_4": "Ошибка",
        "answer_5": "None",
        "valid": "answer_1",
        "explanation": (
            "Функция func4(n) создает список квадратов чисел от 0 до n-1. "
            "При вызове func4(3) будут возвращены квадраты 0, 1 и 2, что даст результат [0, 1, 4]. "
            "Пример: func4(4) вернет [0, 1, 4, 9]. "
            "Другой пример: func4(5) вернет [0, 1, 4, 9, 16]."
        )
    },
    95: {
        "question": "Что выведет следующая функция?\n\n"
                    "def func5(s):\n"
                    "    return s[::-1]\n"
                    "print(func5('Python'))",
        "answer_1": "nohtyP",
        "answer_2": "Python",
        "answer_3": "Ошибка",
        "answer_4": "None",
        "answer_5": "0",
        "valid": "answer_1",
        "explanation": (
            "Функция func5(s) возвращает строку в обратном порядке с использованием срезов. "
            "В данном случае строка 'Python' будет преобразована в 'nohtyP'. "
            "Пример: func5('Hello') вернет 'olleH'. "
            "Другой пример: func5('12345') вернет '54321'."
        )
    },
    96: {
        "question": "Что выведет следующая функция?\n\n"
                    "def func6(lst):\n"
                    "    return x for x in lst if x % 2 == 0\n"
                    "print(func6(1, 2, 3, 4, 5, 6))",
        "answer_1": "2, 4, 6",
        "answer_2": "1, 3, 5",
        "answer_3": "2, 3, 4",
        "answer_4": "Ошибка",
        "answer_5": "None",
        "valid": "answer_1",
        "explanation": (
            "Функция func6(lst) использует генератор списка для фильтрации четных чисел из переданного списка. "
            "В данном случае, из списка 1, 2, 3, 4, 5, 6 будут выбраны 2, 4 и 6, что даст результат 2, 4, 6. "
            "Пример: func6(10, 15, 20) вернет 10, 20. "
            "Если передать список без четных чисел, например, func6(1, 3, 5), функция вернет пустой список ."
        )
    },
    97: {
        "question": "Что выведет следующая функция?\n\n"
                    "def func7(s):\n"
                    "    return len(s)\n"
                    "print(func7('Hello, World!'))",
        "answer_1": "13",
        "answer_2": "12",
        "answer_3": "14",
        "answer_4": "Ошибка",
        "answer_5": "0",
        "valid": "answer_1",
        "explanation": (
            "Функция func7(s) возвращает длину строки, считая все символы, включая пробелы и знаки препинания. "
            "В данном случае строка 'Hello, World!' состоит из 13 символов, поэтому результат будет 13. "
            "Пример: func7('Python') вернет 6. "
            "Если передать пустой список, например, func7(''), функция вернет 0, так как строка пустая."
        )
    },
    98: {
        "question": "Что выведет следующая функция?\n\n"
                    "def func9(n):\n"
                    "    if n < 0:\n"
                    "        return 'Отрицательное число'\n"
                    "    elif n == 0:\n"
                    "        return 'Ноль'\n"
                    "    else:\n"
                    "        return 'Положительное число'\n"
                    "print(func9(0))",
        "answer_1": "'Отрицательное число'",
        "answer_2": "'Ноль'",
        "answer_3": "'Положительное число'",
        "answer_4": "Ошибка",
        "answer_5": "None",
        "valid": "answer_2",
        "explanation": (
            "Функция func9(n) проверяет, является ли число отрицательным, нулем или положительным. "
            "В данном случае, так как передано 0, функция вернет 'Ноль'. "
            "Пример: func9(-5) вернет 'Отрицательное число'. "
            "Если передать положительное число, например, func9(5), функция вернет 'Положительное число'."
        )
    },
    99: {
        "question": "Что выведет следующая функция?\n\n"
                    "def func10(s):\n"
                    "    return s[::-1]\n"
                    "print(func10('racecar'))",
        "answer_1": "'racecar'",
        "answer_2": "'racecaR'",
        "answer_3": "'racecar'",
        "answer_4": "Ошибка",
        "answer_5": "None",
        "valid": "answer_1",
        "explanation": (
            "Функция func10(s) возвращает строку в обратном порядке с использованием срезов. "
            "В данном случае строка 'racecar' является палиндромом, поэтому результат будет 'racecar', который читается одинаково с обеих сторон. "
            "Пример: func10('Hello') вернет 'olleH'. "
            "Другой пример: func10('12345') вернет '54321'."
        )
    },
}
