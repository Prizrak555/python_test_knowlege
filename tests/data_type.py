name_theme = "Типы данных"
questions_dict = {
    0: {
        "question": "Что такое тип данных?",
        "answer_1": "Это набор значений и операций, которые можно выполнять над этими значениями",
        "answer_2": "Это способ представления информации в компьютере, определяющий возможные значения "
                    "и операции над ними",
        "answer_3": "Это функция, которая принимает на вход значение и возвращает его тип",
        "answer_4": "Это тип переменной, который нельзя изменить",
        "answer_5": "Это способ хранения данных в файле",
        "valid": "answer_2",
        "explanation": "Каждое значение в программе имеет свой тип. По которому устройство понимает, как хранить это "
                       "значение в памяти, какие операции можно с ним совершать, может ли быть модифицировано это "
                       "значение.\n\nНапример: Строки мы можем складывать и умножать, а с целыми числами мы можем "
                       "производить все арифметические операции. Мы можем к строкам применять различные методы ,которые"
                       " они поддерживают. Найти длину, или вхождение подстроки, или разделить ее на слова, "
                       "а вот с числами - мы так не можем"},
    1: {
        "question": "Какой метод можно использовать для преобразования списка в множество?",
        "answer_1": "set()",
        "answer_2": "list()",
        "answer_3": "tuple()",
        "answer_4": "dict()",
        "answer_5": "str()",
        "valid": "answer_1",
        "explanation": "Функция set() позволяет создать множество из списка.\n\n"
                       "(И не только из списка)"},
    2: {
        "question": "Какие типы данных существуют в Python?",
        "answer_1": "В Python есть: int, float, str, list, tuple, set, dict и другие",
        "answer_2": "В Python есть только один тип данных — объекты",
        "answer_3": "В Python нет типов данных, все значения являются объектами",
        "answer_4": "Python поддерживает только целые числа и списки.",
        "answer_5": "Все данные в Python являются объектами, но они могут быть разных типов:"
                    "int, float, str, list, tuple, set, dict и другие",
        "valid": "answer_5",
        "explanation": "Если вы выбрали первый вариант, то вы Правы, но ровно до тех пор, пока не прошли тему "
                       "ООП (объектно-ориентированное программирование) \n\n"
                       "Дело в том, что концепция Python - Всё является объектами\n\n"
                       "int - это объект\n"
                       "float - это объект\n"
                       "str - это объект\n"
                       "list - это объект\n"
                       "...\n"
                       "Объект - это объект\n"
                       "функция - это объект\n"
                       "Класс - это объект\n"
                       "Мы подробно на этом остановимся, когда будем проходить ООП"},
    3: {
        "question": "Какой тип данных используется для хранения целых чисел?",
        "answer_1": "None",
        "answer_2": "float",
        "answer_3": "bool",
        "answer_4": "complex",
        "answer_5": "int",
        "valid": "answer_5",
        "explanation": "int - сокращение от integer (целое число) \n\n Это тип данных для хранения целых чисел.\n"
                       "Есть в каждом языке программирования. Например: C, C++, Java, Python, JavaScript\n\n"
                       "Не имеет ограничений по объему памяти в Python, но в других языках программирования ограничен"},
    4: {
        "question": "Как определить тип переменной в Python?",
        "answer_1": "Использовать метод gettype()",
        "answer_2": "Использовать оператор isinstance()",
        "answer_3": "Посмотреть на значение переменной",
        "answer_4": "Использовать функцию type()",
        "answer_5": "Использовать модуль inspect",
        "valid": "answer_4",
        "explanation": "isinstance() и type() — это две функции в Python, которые используются для определения типа "
                       "объекта, но они имеют разные цели и поведение. Вот основные отличия между ними:"
                       "type()\nНазначение: функция для определения типа переменной\nОна получает значение и возвращает"
                       " его точный тип\n(Использует строгую проверку)\n\n"
                       "Если вы ответили isinstance(), то вы не сильно ошиблись, она лишь менее точная \n"
                       "Назначение: Проверяет, является ли объект экземпляром указанного класса или его подкласса."},
    5: {
        "question": "Можно ли изменить тип переменной после её создания?",
        "answer_1": "Нет, тип переменной фиксирован",
        "answer_2": "Да, можно использовать функцию type() для изменения типа переменной",
        "answer_3": "Да, но не во всех случаях",
        "answer_4": "Можно изменить тип переменной, если она является объектом",
        "answer_5": "Нельзя изменить тип переменной, но можно создать новую переменную с нужным типом и присвоить "
                    "ей значение старой переменной",
        "valid": "answer_3",
        "explanation": "У нас есть функции приведения типов: int(), float(), str(), list(), tuple(), "
                       "set(), dict() и т.д.\n Но не всегда можно взять и изменить тип.\n"
                       "Например: str в int может привести к ошибке. "
                       "int(\"55\") - это верно,\n\n но int(\"55.0\") или int(\"Б-52\") - приведет к ошибке.\n\n"
                       "Так же как и если мы попробуем список [X, Y, Z] привести к целому числу (int) и т.д."},
    6: {
        "question": "Что произойдет, если вы попытаетесь изменить элемент кортежа?",
        "answer_1": "Элемент будет изменен",
        "answer_2": "Произойдет ошибка",
        "answer_3": "Кортеж будет преобразован в список",
        "answer_4": "Ничего не произойдет",
        "answer_5": "Кортеж станет пустым",
        "valid": "answer_2",
        "explanation": "Кортежи являются неизменяемыми, и попытка изменить элемент вызовет ошибку TypeError.\n\n"
        "Тут можно обратить внимание, что кортежи - это, по-сути, неизменяемые списки. Они поддерживают методы "
        "списков, которые не изменяют их содержимое. (их не много)\n\n"
        "Вы можете использовать с кортежами:\n"
        "tuple.index(), tuple.count(), len(tuple), \nможно брать срезы и обращаться по индексам."
        "Но методы изменяющие содержимое кортежей - не поддерживаются:\n"
        "append(), extend(), insert(), remove(), reverse()...\n\n"
        
        "Так же не возможно обратиться к элементу по индексу и изменить его таким образом - будет ошибка (ERROR)\n"
        "А вот со списками так делать можно\n"
    },
    7: {
        "question": "Какой тип данных будет результатом операции 5 / 2?",
        "answer_1": "int",
        "answer_2": "float",
        "answer_3": "str",
        "answer_4": "list",
        "answer_5": "None",
        "valid": "answer_2",
        "explanation": "Операция деления (/) всегда возвращает число с плавающей запятой (float). \n\n"
                       "(в отличие от операций // и %)"
    },
    8: {
        "question": "Какой метод можно использовать для добавления элемента/ов в список?",
        "answer_1": "__add__()",
        "answer_2": "append()",
        "answer_3": "insert()",
        "answer_4": "extend()",
        "answer_5": "все вышеперечисленные",
        "valid": "answer_5",
        "explanation": "Все перечисленные методы могут добавлять элементы в список, но по-разному.\n\n"
        "Например, append() - добавляет элемент в конец списка,\n"
        "insert() - добавляет элемент по индексу,\n"
        "extend() - добавляет элементы из другого списка.\n"
        "__add__() - это метод для сложения списков. Он срабатывает при операторе +\n"
    },
    9: {
        "question": "Будьте внимательны к символам.\nКакой результат будет у выражения 'Hello' + '  World'?",
        "answer_1": "'Hello World'",
        "answer_2": "'HelloWorld'",
        "answer_3": "'Hello+World'",
        "answer_4": "'Hello World!'",
        "answer_5": "Ошибка",
        "valid": "answer_1",
        "explanation": "Ответ: 'Hello World'\n\n"
                       "Сложение строк приводит к их конкатенации. Но нужно быть внимательными с пробелами."
    },
    10: {
        "question": "Как можно проверить, является ли переменная my_var целым числом (типом int)?\n"
                    "Советую хорошо подумать перед ответом",
        "answer_1": "is_number(var)",
        "answer_2": "var.isdigit()",
        "answer_3": "isinstance(var, int)",
        "answer_4": "type(var) == 'int'",
        "answer_5": "var.isnumeric()",
        "valid": "answer_3",
        "explanation": "Функция isinstance() будет правильным ответом - она позволяет проверить тип переменной на "
                       "соответствие какому-то конкретному типу данных или на соответствие одному типу из коллекции.\n"
                       "Например:\n"
                       "isinstance(var, int) вернет True, если var - целое число.\n"
                       "isinstance(var, float) вернет False, если var - целое число.\n"
                       "isinstance(var, (int, float)) вернет True, если var - целое число или тип float.\n"
                       "\nКасательно остальных вариантов: \n"
                       "type(var) == 'int' вернет True, если var - целое число.\n"
    },
    11: {
        "question": "Какой метод используется для удаления всех элементов из множества?",
        "answer_1": "remove()",
        "answer_2": "discard()",
        "answer_3": "clear()",
        "answer_4": "pop()",
        "answer_5": "reset()",
        "valid": "answer_3",
        "explanation": "Верный ответ:\n"
                       "Метод clear() удаляет все элементы из множества. (полностью отчищает множество)\n"
                       "set.discard(elem) - удаляет элемент, если он находится в множестве. (без исключения)\n"
                       "set.pop() - удаляет первый элемент из множества. "
                       "Так как множества не упорядочены, нельзя точно сказать, какой элемент будет первым.\n"
                       "Метод reset() - НЕТ такого метода у множеств\n"
                       "set.remove(elem) - удаляет элемент из множества. Вызывает исключение KeyError, "
                       "если такого элемента не существует.\n"
    },
    12: {
        "question": "Какое значение вернет выражение 5 % 2?",
        "answer_1": "2",
        "answer_2": "1",
        "answer_3": "0",
        "answer_4": "5",
        "answer_5": "2.5",
        "valid": "answer_2",
        "explanation": "Оператор % возвращает остаток от деления, в данном случае 1.\n\n Как это происходит:\n"
                       "5 % 2 = 1\n"
                       "2 * 2 = 4 - это максимально близкое к 5 значение, которое "
                       "мы можем получить при умножении Двойки\n"
                       "5 - 4 = 1 - это остаток\n"
    },
    13: {
        "question": "Какой метод можно использовать для сортировки списка?",
        "answer_1": "sort()",
        "answer_2": "order()",
        "answer_3": "arrange()",
        "answer_4": "shuffle()",
        "answer_5": "list()",
        "valid": "answer_1",
        "explanation": "Метод sort() сортирует элементы списка на месте."
    },
    14: {
        "question": "Что произойдет, если вы попытаетесь создать множество из дубликатов?",
        "answer_1": "Создастся множество с дубликатами",
        "answer_2": "Создастся пустое множество",
        "answer_3": "Создастся множество без дубликатов",
        "answer_4": "Произойдет ошибка",
        "answer_5": "Создастся список",
        "valid": "answer_3",
        "explanation": "Множества автоматически удаляют дубликаты.\n\nСоответственно, если вы попытаетесь создать "
                       "множество из коллекции, в которой есть дубликаты, то вы получите коллекцию, "
                       "где каждый элемент останется в единственном виде, то есть НЕ будет дубликатов"
    },
    15: {
        "question": "Какой метод используется для преобразования множества в список?",
        "answer_1": "list()",
        "answer_2": "set()",
        "answer_3": "tuple()",
        "answer_4": "dict()",
        "answer_5": "array()",
        "valid": "answer_1",
        "explanation": "Функция list() позволяет преобразовать множество в список.\n\n"
                       "tuple() -преобразует в кортеж\n"
                       "set() - преобразует во множество\n"
                       "dict() - преобразует в словарь \n"
                       "array() - преобразует в массив (нужен модуль)\n"
    },
    16: {
        "question": "Какой результат будет у выражения 3 * 'a'?",
        "answer_1": "aaa",
        "answer_2": "3a",
        "answer_3": "Error",
        "answer_4": "a3",
        "answer_5": "3",
        "valid": "answer_1",
        "explanation": "При умножении строки на число происходит повторение строки указанное кол-во раз."
                       "\n\nНапример: 'a' * 3 = 'aaa'\n"
                       "Обратите внимание, что в данной операции, один операнд должен быть строкой, "
                       "второй обязательно числом. Иначе будет ошибка (ERROR"
    },
    17: {
        "question": "Какой тип данных возвращает функция range()?",
        "answer_1": "list",
        "answer_2": "set",
        "answer_3": "tuple",
        "answer_4": "range",
        "answer_5": "dict",
        "valid": "answer_4",
        "explanation": "Функция range() возвращает объект типа range. "
                       "Вы можете в этом сами убедиться с помощью функции type()"
    },
    18: {
        "question": "Какой метод|функцию можно использовать для получения длины списка?",
        "answer_1": "count()",
        "answer_2": "size()",
        "answer_3": "len()",
        "answer_4": "length()",
        "answer_5": "length_of()",
        "valid": "answer_3",
        "explanation": "Функция len() возвращает количество элементов в списке."
    },
    19: {
        "question": "Какой результат будет у выражения (1, 2) + (3, 4)?",
        "answer_1": "(1, 2, 3, 4)",
        "answer_2": "(1, 2)(3, 4)",
        "answer_3": "None",
        "answer_4": "Ошибка",
        "answer_5": "(4, 3, 2, 1)",
        "valid": "answer_1",
        "explanation": "Сложение кортежей приводит к их конкатенации. "
                       "То есть мы получим один общий кортеж (1, 2, 3, 4)."
    },
    20: {
        "question": "Какой метод можно использовать для получения уникальных элементов из списка? "
                    "(тот же самый список, только без Дубликатов",
        "answer_1": "unique()",
        "answer_2": "set()",
        "answer_3": "distinct()",
        "answer_4": "remove_duplicates()",
        "answer_5": "filter()",
        "valid": "answer_2",
        "explanation": "Функция set() позволяет получить уникальные элементы из списка, превратив тот во множество"
    },
    21: {
        "question": "Какой из следующих типов данных в Python является неизменяемым?",
        "answer_1": "Список",
        "answer_2": "Множество",
        "answer_3": "Кортеж",
        "answer_4": "Словарь",
        "answer_5": "Массив",
        "valid": "answer_3",
        "explanation": "Кортеж является неизменяемым типом данных, в отличие от всех остальных пунктов"
    },
    22: {
        "question": "Какой метод можно использовать для преобразования строки в целое число?",
        "answer_1": "int()",
        "answer_2": "str()",
        "answer_3": "float()",
        "answer_4": "list()",
        "answer_5": "set()",
        "valid": "answer_1",
        "explanation": "Функция int() позволяет преобразовать строку, содержащую число, в целое число."
    },
    23: {
        "question": "Какой из следующих типов данных является изменяемым?",
        "answer_1": "Кортеж",
        "answer_2": "Число",
        "answer_3": "Строка",
        "answer_4": "Список",
        "answer_5": "Множество",
        "valid": "answer_4",
        "explanation": "Список является изменяемым типом данных, его можно модифицировать, можно обращаться к его "
                       "элементам по индексу и изменять их значения и применять методы, "
                       "которые будут изменять сам список. "
                       "\nНапример: \n"
                       "\nудалять элементы, добавлять новые значения и т.д."
                       "Прошу обратить внимание и на тот факт, что если вы примените к списку сортировку - то результат"
                       "не нужно будет присваивать списку, сам список поменяется"
    },
    24: {
        "question": "Какой результат будет у выражения 3 + 2.0?",
        "answer_1": "5",
        "answer_2": "5.0",
        "answer_3": "TypeError",
        "answer_4": "None",
        "answer_5": "3.0",
        "valid": "answer_2",
        "explanation": "При сложении целого числа и числа с плавающей запятой результат будет float."
    },
    25: {
        "question": "Какой из следующих типов данных является изменяемым?",
        "answer_1": "int",
        "answer_2": "str",
        "answer_3": "tuple",
        "answer_4": "dict",
        "answer_5": "frozenset",
        "valid": "answer_4",
        "explanation": "Словари (dict) являются изменяемыми, что позволяет добавлять, "
                       "удалять ключи и изменять их значения"
    },
    26: {
        "question": "Какой из следующих типов данных является неизменяемым?",
        "answer_1": "set",
        "answer_2": "list",
        "answer_3": "dict",
        "answer_4": "str",
        "answer_5": "bytearray",
        "valid": "answer_4",
        "explanation": "Строки (str) являются неизменяемыми, что означает, что их нельзя изменить после создания."
    },
    27: {
        "question": "Какой оператор используется для приведения типа данных int к float?",
        "answer_1": "int()",
        "answer_2": "float()",
        "answer_3": "str()",
        "answer_4": "round()",
        "answer_5": "abs()",
        "valid": "answer_2",
        "explanation": "Функция float() используется для приведения целого числа (int) и строки (str)"
                       "к числу с плавающей точкой (float)."
    },
    28: {
        "question": "Какой из следующих типов данных не является коллекцией?",
        "answer_1": "str",
        "answer_2": "dict",
        "answer_3": "int",
        "answer_4": "list",
        "answer_5": "tuple",
        "valid": "answer_3",
        "explanation": "Целые числа (int) являются простым типом данных и не поддерживают индексирование."
                       "Да строки (str) тоже являются простым типом данных, но это, все же, набор символов, "
                       "к любому символу которого вы можете обратиться по индексу"
    },
    29: {
        "question": "Какой результат выполнения выражения 5 + 3.0?",
        "answer_1": "8",
        "answer_2": "8.0",
        "answer_3": "Ошибка",
        "answer_4": "53",
        "answer_5": "8.00",
        "valid": "answer_2",
        "explanation": "При сложении целого числа и числа с плавающей точкой результат будет "
                       "числом с плавающей точкой (float)."
    },
    30: {
        "question": "Какой тип данных возвращает функция len()?",
        "answer_1": "int",
        "answer_2": "float",
        "answer_3": "str",
        "answer_4": "list",
        "answer_5": "bool",
        "valid": "answer_1",
        "explanation": "Функция len() возвращает целое число (int), представляющее количество элементов в объекте."
    },
    31: {
        "question": "Какой из следующих типов данных является коллекцией?",
        "answer_1": "int",
        "answer_2": "str",
        "answer_3": "tuple",
        "answer_4": "float",
        "answer_5": "bool",
        "valid": "answer_3",
        "explanation": "Кортежи (tuple) являются коллекциями, которые могут содержать несколько элементов."
    },
    32: {
        "question": "Какой результат выполнения выражения '5' + '3'?",
        "answer_1": "8",
        "answer_2": "'53'",
        "answer_3": "Ошибка",
        "answer_4": "8.0",
        "answer_5": "None",
        "valid": "answer_2",
        "explanation": "При сложении строк (str) происходит конкатенация, и результатом будет '53'."
    },
    33: {
        "question": "Какой из следующих типов данных можно использовать в качестве ключа в словаре?",
        "answer_1": "list",
        "answer_2": "dict",
        "answer_3": "set",
        "answer_4": "str",
        "answer_5": "bytearray",
        "valid": "answer_4",
        "explanation": "Ключами в словаре могут быть только неизменяемые типы данных, "
                       "такие как строки (str), числа и кортежи."
    },
    34: {
        "question": "Какой тип данных используется для работы с истинными и ложными значениями?",
        "answer_1": "int",
        "answer_2": "float",
        "answer_3": "str",
        "answer_4": "bool",
        "answer_5": "list",
        "valid": "answer_4",
        "explanation": "Логический тип данных (bool) используется для представления истинных (True) "
                       "и ложных (False) значений."
    },
    35: {
        "question": "Какой результат выполнения выражения 10 // 3?",
        "answer_1": "3",
        "answer_2": "3.33",
        "answer_3": "3.0",
        "answer_4": "3.5",
        "answer_5": "4",
        "valid": "answer_1",
        "explanation": "Оператор // выполняет целочисленное деление, результатом будет 3.\n"
                       "3 * 3 = 9\n"
                       "10 - 9 = 1\n"
                       "1 < 3 то есть целой части больше не получится\n"
    },
    36: {
        "question": "Какой тип данных используется для представления чисел с плавающей точкой?",
        "answer_1": "int",
        "answer_2": "str",
        "answer_3": "float",
        "answer_4": "bool",
        "answer_5": "dict",
        "valid": "answer_3",
        "explanation": "Тип данных float используется для представления чисел с плавающей точкой."
    },
    37: {
        "question": "Какой метод используется для преобразования строки в целое число?",
        "answer_1": "str()",
        "answer_2": "int()",
        "answer_3": "float()",
        "answer_4": "bool()",
        "answer_5": "list()",
        "valid": "answer_2",
        "explanation": "Метод int() используется для преобразования строки, содержащей только цифры, в целое число."
    },
    38: {
        "question": "Какой из приведенных типов данных поддерживает операцию \"конкатенация\"?",
        "answer_1": "int",
        "answer_2": "str",
        "answer_3": "float",
        "answer_4": "dict",
        "answer_5": "bool",
        "valid": "answer_2",
        "explanation": "Строки (str) поддерживают операцию объединения (конкатенация)."
    },
    39: {
        "question": "Какой результат выполнения выражения 3 + 'Hello'?",
        "answer_1": "HelloHelloHello",
        "answer_2": "Ошибка",
        "answer_3": "3Hello",
        "answer_4": "Hello3",
        "answer_5": "None",
        "valid": "answer_1",
        "explanation": "3 - int\n 'Hello' - str\n\nВ результате мы получим ошибку. "
                       "Так как строки можно складывать только со строками, а целые числа с целыми и дробными числами "
    },
    40: {
        "question": "Какой метод используется для добавления элемента в конец списка?",
        "answer_1": "append()",
        "answer_2": "add()",
        "answer_3": "insert()",
        "answer_4": "extend()",
        "answer_5": "update()",
        "valid": "answer_1",
        "explanation": "Метод append() добавляет элемент в конец списка."
    },
    41: {
        "question": "Какой тип данных используется для хранения пар ключ-значение?",
        "answer_1": "list",
        "answer_2": "tuple",
        "answer_3": "dict",
        "answer_4": "set",
        "answer_5": "str",
        "valid": "answer_3",
        "explanation": "Словари (dict) используются для хранения пар ключ-значение."
    },
    42: {
        "question": "Какой результат выполнения выражения 2 ** 3?",
        "answer_1": "6",
        "answer_2": "8",
        "answer_3": "4",
        "answer_4": "3",
        "answer_5": "9",
        "valid": "answer_2",
        "explanation": "Оператор ** выполняет возведение в степень, поэтому 2 в степени 3 равно 8."
    },
    43: {
        "question": "Какой метод используется для получения первого элемента из списка?",
        "answer_1": "first()",
        "answer_2": "get()",
        "answer_3": "pop()",
        "answer_4": "index()",
        "answer_5": "list[0]",
        "valid": "answer_5",
        "explanation": "Элементы списка можно получить по индексу, и первый элемент имеет индекс 0."
    },
    44: {
        "question": "Какой оператор используется для проверки равенства двух значений?",
        "answer_1": "=",
        "answer_2": "==",
        "answer_3": "===",
        "answer_4": "!=",
        "answer_5": "<>",
        "valid": "answer_2",
        "explanation": "Оператор == используется для проверки равенства двух значений."
                       "Оператор = это присвоение значения"
                       "!= это Не равно"
    },
}

